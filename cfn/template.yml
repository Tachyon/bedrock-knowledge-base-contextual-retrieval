AWSTemplateFormatVersion: 2010-09-09
Description: 'Serverless RAG Q&A application using Knowledge Base , Agents, Opensearch Serverless'

Parameters:
  KnowledgeBaseName:
    Default: contextual-embedding-demo
    Type: String
    Description: The name of the knowledge base.
  KnowledgeBaseDescription:
    Default: A demo for using contextual embedding with Bedrock KB.
    Type: String
    Description: The description of the knowledge base.
  AOSSCollectionName:
    Default: contextual-embedding-demo-collection
    Type: String
    Description: Name of AOSS collection
  AOSSIndexName:
    Default: contextual-embedding-demo-index
    Type: String
    Description: Name of the vector index in the Amazon OpenSearch Service Serverless (AOSS) collection. You can get the name from the output section of the previous stack

Resources:
  AmazonBedrockExecutionRoleForAgentsQA:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AmazonBedrockExecutionRoleForAgents_SageMakerQA
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess

  KnowledgeBaseWithAoss:
    Type: AWS::Bedrock::KnowledgeBase
    Properties:
      Name: !Ref KnowledgeBaseName
      Description: !Ref KnowledgeBaseDescription
      RoleArn: !Ref AmazonBedrockExecutionRoleForKnowledgeBasearn
      KnowledgeBaseConfiguration:
        Type: "VECTOR"
        VectorKnowledgeBaseConfiguration:
          EmbeddingModelArn: !Sub "arn:${AWS::Partition}:bedrock:${AWS::Region}::foundation-model/amazon.titan-embed-text-v1"
      StorageConfiguration:
        Type: "OPENSEARCH_SERVERLESS"
        OpensearchServerlessConfiguration:
          CollectionArn: !Ref CollectionArn
          VectorIndexName: !Ref AOSSIndexName
          FieldMapping:
            VectorField: "vector"
            TextField: "text"
            MetadataField: "metadata"
  SampleDataSource:
    Type: AWS::Bedrock::DataSource
    Properties:
      KnowledgeBaseId: !Ref KnowledgeBaseWithAoss
      Name: !Ref DataSource
      DataSourceConfiguration:
        Type: "S3"
        S3Configuration:
          BucketArn: !GetAtt DataSourceS3Bucket.Arn
      VectorIngestionConfiguration:
        CustomTransformationConfiguration:
          IntermediateStorage:
            S3Location:
              URI: !GetAtt IntermediateStorageBucket.Arn
          Transformations:
            StepToApply: String
            TransformationFunction:
              TransformationLambdaConfiguration:
                LambdaArn: !GetAtt TransformationLambdaFunction.Arn
  IntermediateStorageBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join
        - '-'
        - !Ref KnowledgeBaseName
        - "intermediate"
        - !Sub ${AWS::AccountId}
  TransformationLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: ContextualEmbeddingGenerator
      Handler: index.handler
      Runtime: nodejs14.x
      Role: !GetAtt LambdaFunctionRole.Arn
      MemorySize: 1024
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return "Hello World!";
          }
    LambdaFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: "/"
        Policies:
          - PolicyName: AppendToLogsPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "*"
          - PolicyName: BedrockInvokePolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - bedrock:InvokeModelWithResponseStream
                    - bedrock:InvokeModel
                  Resource: "arn:aws:bedrock:*::foundation-model/*"
          - PolicyName: S3Policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:PutObject
                  Resource: !GetAtt IntermediateStorageBucket.Arn
      DataSourceS3Bucket:
        Type: AWS::S3::Bucket
        Description: Creating Amazon S3 bucket to hold source data for knowledge base
        Properties:
          BucketName: !Join
            - '-'
            - - !Ref AOSSCollectionName
              - !Sub ${AWS::AccountId}
          BucketEncryption:
            ServerSideEncryptionConfiguration:
              - ServerSideEncryptionByDefault:
                  SSEAlgorithm: AES256

      cleanupBucketOnDelete:
        Type: Custom::cleanupbucket
        Properties:
          ServiceToken: !GetAtt 'DeleteS3Bucket.Arn'
          BucketName: !Ref S3Bucket
        DependsOn: S3Bucket

      AmazonBedrockExecutionRoleForKnowledgeBase:
        Type: AWS::IAM::Role
        Properties:
          RoleName: !Join
            - '-'
            - - AmazonBedrockExecutionRoleForKnowledgeBase
              - !Ref AOSSCollectionName
          AssumeRolePolicyDocument:
            Statement:
              - Effect: Allow
                Principal:
                  Service: bedrock.amazonaws.com
                Action: sts:AssumeRole
                Condition:
                  StringEquals:
                    "aws:SourceAccount": !Sub "${AWS::AccountId}"
                  ArnLike:
                    "AWS:SourceArn": !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:knowledge-base/*"
          Path: /
          Policies:
            - PolicyName: S3ReadOnlyAccess
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - s3:Get*
                      - s3:List*
                      - s3:Describe*
                      - s3-object-lambda:Get*
                      - s3-object-lambda:List*
                    Resource:
                      - arn:aws:s3:::aws-blogs-artifacts-public/*
                      - !Sub arn:aws:s3:::${S3Bucket}/*
            - PolicyName: AOSSAPIAccessAll
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - aoss:APIAccessAll
                    Resource: !Sub arn:aws:aoss:${AWS::Region}:${AWS::AccountId}:collection/*
            - PolicyName: BedrockListAndInvokeModel
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - bedrock:ListCustomModels
                    Resource: '*'
                  - Effect: Allow
                    Action:
                      - bedrock:InvokeModel
                    Resource: !Sub arn:aws:bedrock:${AWS::Region}::foundation-model/*

      DeleteS3Bucket:
        Type: AWS::Lambda::Function
        Properties:
          Handler: index.lambda_handler
          Description: "Delete all objects in S3 bucket"
          Timeout: 30
          Role: !GetAtt 'LambdaBasicExecutionRole.Arn'
          Runtime: python3.9
          Environment:
            Variables:
              BUCKET_NAME: !Ref S3Bucket
          Code:
            ZipFile: |
              import json, boto3, logging
              import cfnresponse
              logger = logging.getLogger()
              logger.setLevel(logging.INFO)

              def lambda_handler(event, context):
                  logger.info("event: {}".format(event))
                  try:
                      bucket = event['ResourceProperties']['BucketName']
                      logger.info("bucket: {}, event['RequestType']: {}".format(bucket,event['RequestType']))
                      if event['RequestType'] == 'Delete':
                          s3 = boto3.resource('s3')
                          bucket = s3.Bucket(bucket)
                          for obj in bucket.objects.filter():
                              logger.info("delete obj: {}".format(obj))
                              s3.Object(bucket.name, obj.key).delete()

                      sendResponseCfn(event, context, cfnresponse.SUCCESS)
                  except Exception as e:
                      logger.info("Exception: {}".format(e))
                      sendResponseCfn(event, context, cfnresponse.FAILED)

              def sendResponseCfn(event, context, responseStatus):
                  responseData = {}
                  responseData['Data'] = {}
                  cfnresponse.send(event, context, responseStatus, responseData, "CustomResourcePhysicalID")   

      CustomSGResource:
        Type: AWS::CloudFormation::CustomResource
        Properties:
          ServiceToken: !GetAtt 'CustomFunctionCopyContentsToS3Bucket.Arn'


      LambdaBasicExecutionRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Statement:
              - Effect: Allow
                Principal:
                  Service: lambda.amazonaws.com
                Action: sts:AssumeRole
          Path: /
          Policies:
            - PolicyName: S3Access
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - logs:CreateLogGroup
                      - logs:CreateLogStream
                      - logs:PutLogEvents
                    Resource: arn:aws:logs:*:*:*
                  - Effect: Allow
                    Action:
                      - s3:GetObject
                      - s3:PutObject
                      - s3:DeleteObject
                    Resource:
                      - arn:aws:s3:::aws-blogs-artifacts-public/*
                      - !Sub arn:aws:s3:::${S3Bucket}/*
